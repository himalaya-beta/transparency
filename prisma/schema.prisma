// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    relationMode = "prisma"
    url          = env("DATABASE_URL")
}

model Article {
    id        String   @id @default(cuid())
    title     String
    slug      String
    content   String   @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    authorId  String
    author    User     @relation(fields: [authorId], references: [id])

    @@index([authorId])
}

model Criteria {
    id          String        @id @default(cuid())
    value       String
    slug        String        @unique
    parentId    String?
    type        CriteriaType  @default(TRUE_OR_FALSE)
    order       Int
    parent      Criteria?     @relation("CriteriaChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    children    Criteria[]    @relation("CriteriaChildren")
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    AppCriteria AppCriteria[]

    @@index([parentId])
}

model App {
    id           String        @id @default(cuid())
    name         String
    about        String?
    company      String?
    headquarter  String?
    registeredIn String?
    offices      String?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    AppCriteria  AppCriteria[]
}

model AppCriteria {
    app        App      @relation(fields: [appId], references: [id])
    appId      String
    criteriaId String
    criteria   Criteria @relation(fields: [criteriaId], references: [id])
    order      Int?
    status     Boolean?
    note       String?
    assignedAt DateTime @default(now())
    assignedBy String

    @@id([appId, criteriaId])
    @@index([criteriaId])
    @@index([appId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    articles      Article[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    ADMIN
    USER
}

enum CriteriaType {
    TRUE_OR_FALSE
    EXPLANATION
    TRUE_OR_FALSE_WITH_EXPLANATION
}
